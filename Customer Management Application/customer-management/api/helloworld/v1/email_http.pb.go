// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/email.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEmailCreateEmail = "/api.helloworld.v1.Email/CreateEmail"
const OperationEmailDeleteEmail = "/api.helloworld.v1.Email/DeleteEmail"
const OperationEmailGetEmail = "/api.helloworld.v1.Email/GetEmail"
const OperationEmailListEmail = "/api.helloworld.v1.Email/ListEmail"
const OperationEmailUpdateEmail = "/api.helloworld.v1.Email/UpdateEmail"

type EmailHTTPServer interface {
	CreateEmail(context.Context, *CreateEmailRequest) (*CreateEmailReply, error)
	DeleteEmail(context.Context, *DeleteEmailRequest) (*DeleteEmailReply, error)
	GetEmail(context.Context, *GetEmailRequest) (*GetEmailReply, error)
	ListEmail(context.Context, *ListEmailRequest) (*ListEmailReply, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailReply, error)
}

func RegisterEmailHTTPServer(s *http.Server, srv EmailHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/email", _Email_CreateEmail0_HTTP_Handler(srv))
	r.PUT("/v1/email/{id}", _Email_UpdateEmail0_HTTP_Handler(srv))
	r.DELETE("/v1/email/{id}", _Email_DeleteEmail0_HTTP_Handler(srv))
	r.GET("/v1/email/{id}", _Email_GetEmail0_HTTP_Handler(srv))
	r.GET("/v1/email/list", _Email_ListEmail0_HTTP_Handler(srv))
}

func _Email_CreateEmail0_HTTP_Handler(srv EmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmailCreateEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEmail(ctx, req.(*CreateEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEmailReply)
		return ctx.Result(200, reply)
	}
}

func _Email_UpdateEmail0_HTTP_Handler(srv EmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmailUpdateEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateEmail(ctx, req.(*UpdateEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEmailReply)
		return ctx.Result(200, reply)
	}
}

func _Email_DeleteEmail0_HTTP_Handler(srv EmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEmailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmailDeleteEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEmail(ctx, req.(*DeleteEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEmailReply)
		return ctx.Result(200, reply)
	}
}

func _Email_GetEmail0_HTTP_Handler(srv EmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmailGetEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEmail(ctx, req.(*GetEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEmailReply)
		return ctx.Result(200, reply)
	}
}

func _Email_ListEmail0_HTTP_Handler(srv EmailHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmailListEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmail(ctx, req.(*ListEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEmailReply)
		return ctx.Result(200, reply)
	}
}

type EmailHTTPClient interface {
	CreateEmail(ctx context.Context, req *CreateEmailRequest, opts ...http.CallOption) (rsp *CreateEmailReply, err error)
	DeleteEmail(ctx context.Context, req *DeleteEmailRequest, opts ...http.CallOption) (rsp *DeleteEmailReply, err error)
	GetEmail(ctx context.Context, req *GetEmailRequest, opts ...http.CallOption) (rsp *GetEmailReply, err error)
	ListEmail(ctx context.Context, req *ListEmailRequest, opts ...http.CallOption) (rsp *ListEmailReply, err error)
	UpdateEmail(ctx context.Context, req *UpdateEmailRequest, opts ...http.CallOption) (rsp *UpdateEmailReply, err error)
}

type EmailHTTPClientImpl struct {
	cc *http.Client
}

func NewEmailHTTPClient(client *http.Client) EmailHTTPClient {
	return &EmailHTTPClientImpl{client}
}

func (c *EmailHTTPClientImpl) CreateEmail(ctx context.Context, in *CreateEmailRequest, opts ...http.CallOption) (*CreateEmailReply, error) {
	var out CreateEmailReply
	pattern := "/v1/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmailCreateEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmailHTTPClientImpl) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...http.CallOption) (*DeleteEmailReply, error) {
	var out DeleteEmailReply
	pattern := "/v1/email/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmailDeleteEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmailHTTPClientImpl) GetEmail(ctx context.Context, in *GetEmailRequest, opts ...http.CallOption) (*GetEmailReply, error) {
	var out GetEmailReply
	pattern := "/v1/email/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmailGetEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmailHTTPClientImpl) ListEmail(ctx context.Context, in *ListEmailRequest, opts ...http.CallOption) (*ListEmailReply, error) {
	var out ListEmailReply
	pattern := "/v1/email/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmailListEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EmailHTTPClientImpl) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...http.CallOption) (*UpdateEmailReply, error) {
	var out UpdateEmailReply
	pattern := "/v1/email/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmailUpdateEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
