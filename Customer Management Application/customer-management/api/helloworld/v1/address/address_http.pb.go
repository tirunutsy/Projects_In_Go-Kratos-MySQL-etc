// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/address/address.proto

package address

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAddressCreateAddress = "/api.helloworld.v1.address.Address/CreateAddress"
const OperationAddressDeleteAddress = "/api.helloworld.v1.address.Address/DeleteAddress"
const OperationAddressGetAddress = "/api.helloworld.v1.address.Address/GetAddress"
const OperationAddressListAddress = "/api.helloworld.v1.address.Address/ListAddress"
const OperationAddressUpdateAddress = "/api.helloworld.v1.address.Address/UpdateAddress"

type AddressHTTPServer interface {
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressReply, error)
	DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressReply, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressReply, error)
	ListAddress(context.Context, *ListAddressRequest) (*ListAddressReply, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressReply, error)
}

func RegisterAddressHTTPServer(s *http.Server, srv AddressHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/address", _Address_CreateAddress0_HTTP_Handler(srv))
	r.PUT("/v1/address/{id}", _Address_UpdateAddress0_HTTP_Handler(srv))
	r.DELETE("/v1/address/{id}", _Address_DeleteAddress0_HTTP_Handler(srv))
	r.GET("/v1/address/{id}", _Address_GetAddress0_HTTP_Handler(srv))
	r.GET("/v1/address/list", _Address_ListAddress0_HTTP_Handler(srv))
}

func _Address_CreateAddress0_HTTP_Handler(srv AddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressCreateAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*CreateAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAddressReply)
		return ctx.Result(200, reply)
	}
}

func _Address_UpdateAddress0_HTTP_Handler(srv AddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressUpdateAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAddress(ctx, req.(*UpdateAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAddressReply)
		return ctx.Result(200, reply)
	}
}

func _Address_DeleteAddress0_HTTP_Handler(srv AddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressDeleteAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAddress(ctx, req.(*DeleteAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAddressReply)
		return ctx.Result(200, reply)
	}
}

func _Address_GetAddress0_HTTP_Handler(srv AddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressGetAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAddressReply)
		return ctx.Result(200, reply)
	}
}

func _Address_ListAddress0_HTTP_Handler(srv AddressHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAddressListAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAddressReply)
		return ctx.Result(200, reply)
	}
}

type AddressHTTPClient interface {
	CreateAddress(ctx context.Context, req *CreateAddressRequest, opts ...http.CallOption) (rsp *CreateAddressReply, err error)
	DeleteAddress(ctx context.Context, req *DeleteAddressRequest, opts ...http.CallOption) (rsp *DeleteAddressReply, err error)
	GetAddress(ctx context.Context, req *GetAddressRequest, opts ...http.CallOption) (rsp *GetAddressReply, err error)
	ListAddress(ctx context.Context, req *ListAddressRequest, opts ...http.CallOption) (rsp *ListAddressReply, err error)
	UpdateAddress(ctx context.Context, req *UpdateAddressRequest, opts ...http.CallOption) (rsp *UpdateAddressReply, err error)
}

type AddressHTTPClientImpl struct {
	cc *http.Client
}

func NewAddressHTTPClient(client *http.Client) AddressHTTPClient {
	return &AddressHTTPClientImpl{client}
}

func (c *AddressHTTPClientImpl) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...http.CallOption) (*CreateAddressReply, error) {
	var out CreateAddressReply
	pattern := "/v1/address"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAddressCreateAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressHTTPClientImpl) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...http.CallOption) (*DeleteAddressReply, error) {
	var out DeleteAddressReply
	pattern := "/v1/address/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressDeleteAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...http.CallOption) (*GetAddressReply, error) {
	var out GetAddressReply
	pattern := "/v1/address/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressGetAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressHTTPClientImpl) ListAddress(ctx context.Context, in *ListAddressRequest, opts ...http.CallOption) (*ListAddressReply, error) {
	var out ListAddressReply
	pattern := "/v1/address/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAddressListAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AddressHTTPClientImpl) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...http.CallOption) (*UpdateAddressReply, error) {
	var out UpdateAddressReply
	pattern := "/v1/address/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAddressUpdateAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
