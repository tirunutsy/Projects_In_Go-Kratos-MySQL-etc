// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/phone/phone.proto

package phone

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPhoneServiceCreatePhone = "/api.helloworld.v1.PhoneService/CreatePhone"
const OperationPhoneServiceDeletePhone = "/api.helloworld.v1.PhoneService/DeletePhone"
const OperationPhoneServiceGetPhone = "/api.helloworld.v1.PhoneService/GetPhone"
const OperationPhoneServiceListPhone = "/api.helloworld.v1.PhoneService/ListPhone"
const OperationPhoneServiceUpdatePhone = "/api.helloworld.v1.PhoneService/UpdatePhone"

type PhoneServiceHTTPServer interface {
	CreatePhone(context.Context, *CreatePhoneRequest) (*CreatePhoneReply, error)
	DeletePhone(context.Context, *DeletePhoneRequest) (*DeletePhoneReply, error)
	GetPhone(context.Context, *GetPhoneRequest) (*GetPhoneReply, error)
	ListPhone(context.Context, *ListPhoneRequest) (*ListPhoneReply, error)
	UpdatePhone(context.Context, *UpdatePhoneRequest) (*UpdatePhoneReply, error)
}

func RegisterPhoneServiceHTTPServer(s *http.Server, srv PhoneServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/phone", _PhoneService_CreatePhone0_HTTP_Handler(srv))
	r.PUT("/v1/phone/{id}", _PhoneService_UpdatePhone0_HTTP_Handler(srv))
	r.DELETE("/v1/phone/{id}", _PhoneService_DeletePhone0_HTTP_Handler(srv))
	r.GET("/v1/phone/{id}", _PhoneService_GetPhone0_HTTP_Handler(srv))
	r.GET("/v1/phone/list", _PhoneService_ListPhone0_HTTP_Handler(srv))
}

func _PhoneService_CreatePhone0_HTTP_Handler(srv PhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhoneServiceCreatePhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePhone(ctx, req.(*CreatePhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePhoneReply)
		return ctx.Result(200, reply)
	}
}

func _PhoneService_UpdatePhone0_HTTP_Handler(srv PhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhoneServiceUpdatePhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePhone(ctx, req.(*UpdatePhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePhoneReply)
		return ctx.Result(200, reply)
	}
}

func _PhoneService_DeletePhone0_HTTP_Handler(srv PhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePhoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhoneServiceDeletePhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePhone(ctx, req.(*DeletePhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePhoneReply)
		return ctx.Result(200, reply)
	}
}

func _PhoneService_GetPhone0_HTTP_Handler(srv PhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPhoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhoneServiceGetPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPhone(ctx, req.(*GetPhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPhoneReply)
		return ctx.Result(200, reply)
	}
}

func _PhoneService_ListPhone0_HTTP_Handler(srv PhoneServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPhoneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPhoneServiceListPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPhone(ctx, req.(*ListPhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPhoneReply)
		return ctx.Result(200, reply)
	}
}

type PhoneServiceHTTPClient interface {
	CreatePhone(ctx context.Context, req *CreatePhoneRequest, opts ...http.CallOption) (rsp *CreatePhoneReply, err error)
	DeletePhone(ctx context.Context, req *DeletePhoneRequest, opts ...http.CallOption) (rsp *DeletePhoneReply, err error)
	GetPhone(ctx context.Context, req *GetPhoneRequest, opts ...http.CallOption) (rsp *GetPhoneReply, err error)
	ListPhone(ctx context.Context, req *ListPhoneRequest, opts ...http.CallOption) (rsp *ListPhoneReply, err error)
	UpdatePhone(ctx context.Context, req *UpdatePhoneRequest, opts ...http.CallOption) (rsp *UpdatePhoneReply, err error)
}

type PhoneServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPhoneServiceHTTPClient(client *http.Client) PhoneServiceHTTPClient {
	return &PhoneServiceHTTPClientImpl{client}
}

func (c *PhoneServiceHTTPClientImpl) CreatePhone(ctx context.Context, in *CreatePhoneRequest, opts ...http.CallOption) (*CreatePhoneReply, error) {
	var out CreatePhoneReply
	pattern := "/v1/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPhoneServiceCreatePhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PhoneServiceHTTPClientImpl) DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...http.CallOption) (*DeletePhoneReply, error) {
	var out DeletePhoneReply
	pattern := "/v1/phone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPhoneServiceDeletePhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PhoneServiceHTTPClientImpl) GetPhone(ctx context.Context, in *GetPhoneRequest, opts ...http.CallOption) (*GetPhoneReply, error) {
	var out GetPhoneReply
	pattern := "/v1/phone/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPhoneServiceGetPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PhoneServiceHTTPClientImpl) ListPhone(ctx context.Context, in *ListPhoneRequest, opts ...http.CallOption) (*ListPhoneReply, error) {
	var out ListPhoneReply
	pattern := "/v1/phone/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPhoneServiceListPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PhoneServiceHTTPClientImpl) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...http.CallOption) (*UpdatePhoneReply, error) {
	var out UpdatePhoneReply
	pattern := "/v1/phone/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPhoneServiceUpdatePhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
