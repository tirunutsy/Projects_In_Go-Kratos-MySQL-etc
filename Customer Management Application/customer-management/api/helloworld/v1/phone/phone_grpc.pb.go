// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/helloworld/v1/phone/phone.proto

package phone

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PhoneService_CreatePhone_FullMethodName = "/api.helloworld.v1.PhoneService/CreatePhone"
	PhoneService_UpdatePhone_FullMethodName = "/api.helloworld.v1.PhoneService/UpdatePhone"
	PhoneService_DeletePhone_FullMethodName = "/api.helloworld.v1.PhoneService/DeletePhone"
	PhoneService_GetPhone_FullMethodName    = "/api.helloworld.v1.PhoneService/GetPhone"
	PhoneService_ListPhone_FullMethodName   = "/api.helloworld.v1.PhoneService/ListPhone"
)

// PhoneServiceClient is the client API for PhoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhoneServiceClient interface {
	CreatePhone(ctx context.Context, in *CreatePhoneRequest, opts ...grpc.CallOption) (*CreatePhoneReply, error)
	UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*UpdatePhoneReply, error)
	DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...grpc.CallOption) (*DeletePhoneReply, error)
	GetPhone(ctx context.Context, in *GetPhoneRequest, opts ...grpc.CallOption) (*GetPhoneReply, error)
	ListPhone(ctx context.Context, in *ListPhoneRequest, opts ...grpc.CallOption) (*ListPhoneReply, error)
}

type phoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhoneServiceClient(cc grpc.ClientConnInterface) PhoneServiceClient {
	return &phoneServiceClient{cc}
}

func (c *phoneServiceClient) CreatePhone(ctx context.Context, in *CreatePhoneRequest, opts ...grpc.CallOption) (*CreatePhoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePhoneReply)
	err := c.cc.Invoke(ctx, PhoneService_CreatePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*UpdatePhoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePhoneReply)
	err := c.cc.Invoke(ctx, PhoneService_UpdatePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...grpc.CallOption) (*DeletePhoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePhoneReply)
	err := c.cc.Invoke(ctx, PhoneService_DeletePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) GetPhone(ctx context.Context, in *GetPhoneRequest, opts ...grpc.CallOption) (*GetPhoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPhoneReply)
	err := c.cc.Invoke(ctx, PhoneService_GetPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phoneServiceClient) ListPhone(ctx context.Context, in *ListPhoneRequest, opts ...grpc.CallOption) (*ListPhoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPhoneReply)
	err := c.cc.Invoke(ctx, PhoneService_ListPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhoneServiceServer is the server API for PhoneService service.
// All implementations must embed UnimplementedPhoneServiceServer
// for forward compatibility.
type PhoneServiceServer interface {
	CreatePhone(context.Context, *CreatePhoneRequest) (*CreatePhoneReply, error)
	UpdatePhone(context.Context, *UpdatePhoneRequest) (*UpdatePhoneReply, error)
	DeletePhone(context.Context, *DeletePhoneRequest) (*DeletePhoneReply, error)
	GetPhone(context.Context, *GetPhoneRequest) (*GetPhoneReply, error)
	ListPhone(context.Context, *ListPhoneRequest) (*ListPhoneReply, error)
	mustEmbedUnimplementedPhoneServiceServer()
}

// UnimplementedPhoneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhoneServiceServer struct{}

func (UnimplementedPhoneServiceServer) CreatePhone(context.Context, *CreatePhoneRequest) (*CreatePhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhone not implemented")
}
func (UnimplementedPhoneServiceServer) UpdatePhone(context.Context, *UpdatePhoneRequest) (*UpdatePhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhone not implemented")
}
func (UnimplementedPhoneServiceServer) DeletePhone(context.Context, *DeletePhoneRequest) (*DeletePhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhone not implemented")
}
func (UnimplementedPhoneServiceServer) GetPhone(context.Context, *GetPhoneRequest) (*GetPhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhone not implemented")
}
func (UnimplementedPhoneServiceServer) ListPhone(context.Context, *ListPhoneRequest) (*ListPhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhone not implemented")
}
func (UnimplementedPhoneServiceServer) mustEmbedUnimplementedPhoneServiceServer() {}
func (UnimplementedPhoneServiceServer) testEmbeddedByValue()                      {}

// UnsafePhoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhoneServiceServer will
// result in compilation errors.
type UnsafePhoneServiceServer interface {
	mustEmbedUnimplementedPhoneServiceServer()
}

func RegisterPhoneServiceServer(s grpc.ServiceRegistrar, srv PhoneServiceServer) {
	// If the following call pancis, it indicates UnimplementedPhoneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PhoneService_ServiceDesc, srv)
}

func _PhoneService_CreatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).CreatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_CreatePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).CreatePhone(ctx, req.(*CreatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_UpdatePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).UpdatePhone(ctx, req.(*UpdatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_DeletePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).DeletePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_DeletePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).DeletePhone(ctx, req.(*DeletePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_GetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).GetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_GetPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).GetPhone(ctx, req.(*GetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhoneService_ListPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhoneServiceServer).ListPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhoneService_ListPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhoneServiceServer).ListPhone(ctx, req.(*ListPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhoneService_ServiceDesc is the grpc.ServiceDesc for PhoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.PhoneService",
	HandlerType: (*PhoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePhone",
			Handler:    _PhoneService_CreatePhone_Handler,
		},
		{
			MethodName: "UpdatePhone",
			Handler:    _PhoneService_UpdatePhone_Handler,
		},
		{
			MethodName: "DeletePhone",
			Handler:    _PhoneService_DeletePhone_Handler,
		},
		{
			MethodName: "GetPhone",
			Handler:    _PhoneService_GetPhone_Handler,
		},
		{
			MethodName: "ListPhone",
			Handler:    _PhoneService_ListPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/phone/phone.proto",
}
